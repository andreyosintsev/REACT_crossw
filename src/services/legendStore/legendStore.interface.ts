/**
 * Интерфейс хранилища для управления легендами игрового поля
 * @interface
 */
interface ILegendStore {
    legendHorizontalElements: HTMLDivElement[];
    legendVerticalElements: HTMLDivElement[];

    /**
     * Подсвечивает соответствующие легенды при взаимодействии с клеткой поля
     * @param {React.MouseEvent} event - Событие мыши (наведение/выход)
     * @returns {void}
     *
     * @description
     * Обрабатывает события взаимодействия с клетками игрового поля:
     * 1. Определяет координаты клетки из data-атрибутов
     * 2. Убирает предыдущие выделения со всех легенд
     * 3. Находит соответствующие горизонтальные и вертикальные легенды
     * 4. Добавляет класс подсветки найденным элементам
     *
     * @performance
     * Использует глобальные массивы для мгновенного доступа к DOM-элементам
     * без необходимости обновления состояния хранилища
     *
     * @visualEffects
     * - Удаляет класс 'le_hover' со всех элементов легенд
     * - Добавляет класс 'le_hover' соответствующим легендам
     *
     * @example
     * // В компоненте клетки
     * <div
     *   data-x={x}
     *   data-y={y}
     *   onMouseEnter={highlightLegends}
     *   onMouseLeave={highlightLegends}
     * />
     */
    highlightLegends: (event: MouseEvent) => void;

    /**
     * Регистрирует DOM-элемент легенды в соответствующем глобальном массиве
     * @param {HTMLDivElement} div - DOM-элемент легенды для регистрации
     * @returns {void}
     *
     * @description
     * Определяет тип легенды по data-атрибуту и добавляет элемент
     * в соответствующий глобальный массив для последующего управления.
     * Не вызывает обновления состояния хранилища для производительности.
     *
     * @performance
     * Прямое добавление в глобальные массивы без setState
     * для исключения лишних ререндеров
     *
     * @logic
     * - Если data-type содержит "LegendHorizontal" → добавляет в горизонтальные
     * - Все остальные случаи → добавляет в вертикальные
     *
     * @example
     * // В компоненте легенды
     * useEffect(() => {
     *   if (ref.current) {
     *     getLegendElement(ref.current);
     *   }
     * }, []);
     */
    addLegendElement: (div: HTMLDivElement) => void;

    /**
     * Очищает глобальные массивы DOM-элементов легенд
     * @returns {void}
     *
     * @description
     * Полностью очищает глобальные коллекции зарегистрированных элементов легенд.
     * Используется при:
     * - Перезагрузке игры
     * - Смене уровня/задачи
     * - Очистке перед повторной регистрацией
     *
     * @performance
     * Прямая работа с глобальными массивами без обновления состояния
     *
     * @example
     * // При размонтировании компонента или смене задачи
     * clearLegend();
     */
    clearLegend: () => void;
}

export default ILegendStore;
